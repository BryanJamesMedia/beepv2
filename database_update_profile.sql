-- Update the profiles table with new fields
ALTER TABLE profiles
ADD COLUMN IF NOT EXISTS location TEXT,
ADD COLUMN IF NOT EXISTS age TEXT,
ADD COLUMN IF NOT EXISTS gender TEXT,
ADD COLUMN IF NOT EXISTS headline TEXT;

-- Create gallery table for storing multiple photos per user
CREATE TABLE IF NOT EXISTS gallery (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  image_url TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create index for faster queries
CREATE INDEX IF NOT EXISTS gallery_user_id_idx ON gallery(user_id);

-- Add comment to the gallery table
COMMENT ON TABLE gallery IS 'Stores user gallery images, primarily for creators';

-- Enable Row Level Security (RLS)
ALTER TABLE gallery ENABLE ROW LEVEL SECURITY;

-- Create storage bucket for gallery if it doesn't exist
INSERT INTO storage.buckets (id, name, public)
SELECT 'gallery', 'gallery', true
WHERE NOT EXISTS (
  SELECT 1 FROM storage.buckets WHERE id = 'gallery'
);

-- Create RLS policies for gallery table

-- Allow users to insert their own gallery images
CREATE POLICY "Users can insert their own gallery images"
  ON gallery
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own gallery images
CREATE POLICY "Users can update their own gallery images"
  ON gallery
  FOR UPDATE
  USING (auth.uid() = user_id);

-- Allow users to delete their own gallery images
CREATE POLICY "Users can delete their own gallery images"
  ON gallery
  FOR DELETE
  USING (auth.uid() = user_id);

-- Allow users to view their own gallery images
CREATE POLICY "Users can view their own gallery images"
  ON gallery
  FOR SELECT
  USING (auth.uid() = user_id);

-- Allow all users to view gallery images of users with role 'creator'
CREATE POLICY "Anyone can view creator gallery images"
  ON gallery
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE profiles.id = gallery.user_id
      AND profiles.role = 'creator'
    )
  );

-- Storage policies for gallery bucket
CREATE POLICY "Authenticated users can upload gallery images"
  ON storage.objects FOR INSERT
  WITH CHECK (bucket_id = 'gallery' AND auth.role() = 'authenticated');

CREATE POLICY "Users can update their own gallery images"
  ON storage.objects FOR UPDATE
  USING (bucket_id = 'gallery' AND (storage.foldername(name))[1] = auth.uid()::text);

CREATE POLICY "Users can delete their own gallery images"
  ON storage.objects FOR DELETE
  USING (bucket_id = 'gallery' AND (storage.foldername(name))[1] = auth.uid()::text);

CREATE POLICY "Anyone can view gallery images"
  ON storage.objects FOR SELECT
  USING (bucket_id = 'gallery'); 